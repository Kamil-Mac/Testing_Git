{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\http\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false); //API send data in JSON format, standardowy format dla api\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://swapi.dev/api/film/'); //konwersja json na js, dostaje to co w dokumentacji, obiekt\n\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          releaseDate: movieData.release_date,\n          openingText: movieData.opening_crawl\n        };\n      }); //konwersja otrzymanych danych na pasujacy obiekt, ktory jest przesylany w do komponentu \n\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }\n\n  ; //lub wersja jak ponizej\n  // const fetchMoviesHandler = () => {\n  //   fetch('https://swapi.dev/api/films/')\n  //     .then((response) => {\n  //       return response.json();\n  //     })\n  //     //konwersja json na js, dostaje to co w dokumentacji, obiekt\n  //     .then((data) => {\n  //       const transformedMovies = data.results.map(movieData => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           releaseDate: movieData.release_date,\n  //           openingText: movieData.opening_crawl\n  //         };\n  //       });\n  //       //konwersja otrzymanych danych na pasujacy obiekt, ktory jest przesylany w do komponentu \n  //       setMovies(transformedMovies);\n  //     })\n  // };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, !isLoading && movies.length > 0 && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 43\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, \"Loading...\"), !isLoading && movies.length === 0 && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 45\n    }\n  }, \"Found no movies ;( \"), !isLoading && error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 31\n    }\n  }, error)));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/React/http/src/App.js"],"names":["React","useState","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","status","data","json","transformedMovies","results","map","movieData","id","episode_id","title","releaseDate","release_date","openingText","opening_crawl","message","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AAEb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,KAAD,CAAlC,CAJa,CAKb;;AAEA,iBAAeS,kBAAf,GAAoC;AAClCH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAA5B,CADE,CAEF;;AAEA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAUH,QAAQ,CAACI,MAAnB,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;AAEA,YAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAiBC,SAAS,IAAI;AACtD,eAAO;AACLC,UAAAA,EAAE,EAAED,SAAS,CAACE,UADT;AAELC,UAAAA,KAAK,EAAEH,SAAS,CAACG,KAFZ;AAGLC,UAAAA,WAAW,EAAEJ,SAAS,CAACK,YAHlB;AAILC,UAAAA,WAAW,EAAEN,SAAS,CAACO;AAJlB,SAAP;AAMD,OAPyB,CAA1B,CAVE,CAkBF;;AACAvB,MAAAA,SAAS,CAACa,iBAAD,CAAT;AACD,KApBD,CAoBE,OAAOV,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAACD,KAAK,CAACqB,OAAP,CAAR;AACD;;AACDtB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;;AAAA,GAlCc,CAoCf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEG,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACJ,SAAD,IAAcF,MAAM,CAAC0B,MAAP,GAAgB,CAA9B,iBAAmC,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAE1B,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADtC,EAEGE,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFhB,EAGG,CAACA,SAAD,IAAcF,MAAM,CAAC0B,MAAP,KAAkB,CAAhC,iBAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAHxC,EAIG,CAACxB,SAAD,IAAcE,KAAd,iBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAJ,CAJ1B,CAJF,CADF;AAaC;;AAED,eAAeL,GAAf","sourcesContent":["import React, { useState } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  //API send data in JSON format, standardowy format dla api\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://swapi.dev/api/film/');\n      //konwersja json na js, dostaje to co w dokumentacji, obiekt\n\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n\n      const data = await response.json();\n\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          releaseDate: movieData.release_date,\n          openingText: movieData.opening_crawl\n        };\n      });\n      //konwersja otrzymanych danych na pasujacy obiekt, ktory jest przesylany w do komponentu \n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n};\n\n//lub wersja jak ponizej\n\n// const fetchMoviesHandler = () => {\n//   fetch('https://swapi.dev/api/films/')\n//     .then((response) => {\n//       return response.json();\n//     })\n//     //konwersja json na js, dostaje to co w dokumentacji, obiekt\n//     .then((data) => {\n//       const transformedMovies = data.results.map(movieData => {\n//         return {\n//           id: movieData.episode_id,\n//           title: movieData.title,\n//           releaseDate: movieData.release_date,\n//           openingText: movieData.opening_crawl\n//         };\n//       });\n//       //konwersja otrzymanych danych na pasujacy obiekt, ktory jest przesylany w do komponentu \n//       setMovies(transformedMovies);\n//     })\n// };\n\nreturn (\n  <React.Fragment>\n    <section>\n      <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n    </section>\n    <section>\n      {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n      {isLoading && <p>Loading...</p>}\n      {!isLoading && movies.length === 0 && <p>Found no movies ;( </p>}\n      {!isLoading && error && <p>{error}</p>}\n    </section>\n  </React.Fragment>\n);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}